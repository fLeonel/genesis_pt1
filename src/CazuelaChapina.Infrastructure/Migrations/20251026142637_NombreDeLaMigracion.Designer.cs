// <auto-generated />
using System;
using CazuelaChapina.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CazuelaChapina.Infrastructure.Migrations
{
    [DbContext(typeof(CazuelaChapinaDbContext))]
    [Migration("20251026142637_NombreDeLaMigracion")]
    partial class NombreDeLaMigracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Bodega", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BodegaPadreId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BodegaPadreId");

                    b.ToTable("Bodegas");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClienteCodigo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Correo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioTotal")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Combos");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.MovimientoInventario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Cantidad")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoMovimiento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("MovimientosInventario");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Producto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Atributos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BodegaId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CantidadDisponible")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoriaId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostoUnitario")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EsFabricado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioPublico")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SePuedeComprar")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SePuedeVender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BodegaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Receta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId")
                        .IsUnique();

                    b.ToTable("Recetas");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.RecetaDetalle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CantidadRequerida")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductoIngredienteId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecetaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductoIngredienteId");

                    b.HasIndex("RecetaId");

                    b.ToTable("RecetaDetalles");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Venta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notas")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.VentaDetalle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VentaId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("VentaDetalles");
                });

            modelBuilder.Entity("ComboProducto", b =>
                {
                    b.Property<Guid>("ComboId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductosId")
                        .HasColumnType("TEXT");

                    b.HasKey("ComboId", "ProductosId");

                    b.HasIndex("ProductosId");

                    b.ToTable("ComboProducto");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Bodega", b =>
                {
                    b.HasOne("CazuelaChapina.Domain.Entities.Bodega", "BodegaPadre")
                        .WithMany("SubBodegas")
                        .HasForeignKey("BodegaPadreId");

                    b.Navigation("BodegaPadre");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.MovimientoInventario", b =>
                {
                    b.HasOne("CazuelaChapina.Domain.Entities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Producto", b =>
                {
                    b.HasOne("CazuelaChapina.Domain.Entities.Bodega", "Bodega")
                        .WithMany("Productos")
                        .HasForeignKey("BodegaId");

                    b.HasOne("CazuelaChapina.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bodega");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Receta", b =>
                {
                    b.HasOne("CazuelaChapina.Domain.Entities.Producto", "Producto")
                        .WithOne("Receta")
                        .HasForeignKey("CazuelaChapina.Domain.Entities.Receta", "ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.RecetaDetalle", b =>
                {
                    b.HasOne("CazuelaChapina.Domain.Entities.Producto", "ProductoIngrediente")
                        .WithMany()
                        .HasForeignKey("ProductoIngredienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CazuelaChapina.Domain.Entities.Receta", "Receta")
                        .WithMany("Detalles")
                        .HasForeignKey("RecetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductoIngrediente");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Venta", b =>
                {
                    b.HasOne("CazuelaChapina.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Ventas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.VentaDetalle", b =>
                {
                    b.HasOne("CazuelaChapina.Domain.Entities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CazuelaChapina.Domain.Entities.Venta", "Venta")
                        .WithMany("Detalles")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("ComboProducto", b =>
                {
                    b.HasOne("CazuelaChapina.Domain.Entities.Combo", null)
                        .WithMany()
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CazuelaChapina.Domain.Entities.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Bodega", b =>
                {
                    b.Navigation("Productos");

                    b.Navigation("SubBodegas");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Producto", b =>
                {
                    b.Navigation("Receta");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Receta", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("CazuelaChapina.Domain.Entities.Venta", b =>
                {
                    b.Navigation("Detalles");
                });
#pragma warning restore 612, 618
        }
    }
}
